package dishonestcasino;

import java.io.BufferedWriter;
import java.io.IOException;

public class PosteriorPredictor {

	public void forwardAlgorithm(String actualSequence, String obs,
			HiddenMarkovModel hmm, BufferedWriter bw, String stateSymbols[])
			throws IOException {

		int seqLen = obs.length();
		double forwardMatrix[][] = new double[hmm.getNumState()][seqLen + 1];

		double totalPath;
		double emProb;

		for (int i = 0; i < hmm.getNumState(); i++) {

			forwardMatrix[i][0] = hmm.getiProb()[i];

		}

		for (int k = 1; k < seqLen + 1; k++) {
			int transitionMatrixNoOfCol = 0;
			for (int l = 0; l < hmm.getNumState(); l++) {

				int stateCount = 0;
				double pathEndInFEmit = forwardMatrix[stateCount][k - 1];
				double pathEndInLEmit = forwardMatrix[stateCount + 1][k - 1];
				int curObs = Character.getNumericValue(obs.charAt(k - 1));

				totalPath = Math
						.log(Math.exp(pathEndInFEmit
								+ Math.log(hmm.getTransProb()[stateCount][transitionMatrixNoOfCol]))
								+ Math.exp(pathEndInLEmit
										+ Math.log(hmm.getTransProb()[stateCount + 1][transitionMatrixNoOfCol])));
				emProb = Math.log(hmm.getEmissProb()[l][curObs - 1]);

				forwardMatrix[l][k] = (emProb + totalPath) / 5;
				transitionMatrixNoOfCol++;

			}

		}

		System.out.println("implement");

	}

	public String backwardAlogrithm(String actualSequence, String obs,
			HiddenMarkovModel hmm, BufferedWriter bw, String stateSymbols[]) {

		int seqLen = obs.length();
		double backwardMatrix[][] = new double[hmm.getNumState()][seqLen + 1];
		double emProb;

		// considering the emission of end state as 1
		backwardMatrix[0][seqLen] = 1;
		backwardMatrix[1][seqLen] = 1;

		for (int i = backwardMatrix[0].length - 2; i >= 0; i--) {

			for (int j = hmm.getNumState()-1; j >=0 ; j--) {

			
				int stateCount = 0;
				double priorProbStateL = backwardMatrix[stateCount + 1][i+1];
				double priorProbStateF = backwardMatrix[stateCount][i+1];
				
				int curObs = Character.getNumericValue(obs.charAt(i));
				emProb = Math.log(hmm.getEmissProb()[j][curObs - 1]);
				
				
				
				forwardMatrix[j][i] = Math.log(Math.exp(Math.log(hmm.getTransProb()[j][j])+emProb+priorProbStateL))+Math.log(Math.exp(Math.log(hmm.getTransProb()[j][0])));
				
				
				
				

				totalPath = Math
						.log(Math.exp(pathEndInFEmit
								+ Math.log(hmm.getTransProb()[stateCount][transitionMatrixNoOfCol]))
								+ Math.exp(pathEndInLEmit
										+ Math.log(hmm.getTransProb()[stateCount + 1][transitionMatrixNoOfCol])));
				

				forwardMatrix[l][k] = (emProb + totalPath) / 5;
				transitionMatrixNoOfCol++;
			
			
			
			}

		}

		return null;

	}

}
