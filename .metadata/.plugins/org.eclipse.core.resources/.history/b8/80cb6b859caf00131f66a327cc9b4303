package dishonestcasino;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;

public class Dice {

	private static int numState = 2, eventSize = 6;
	private static double transFL = 0.01, transLF = 0.1, transFF = 1 - transFL,
			transLL = 1 - transLF;
	private static double[][] transProb = { {transFF, transFL}, {transLF, transLL} };
	
	private String stateSymbols[] = { "F", "L" };
	
	private static double emProbFairDie = 0.16666666666666666;
	private static double emProbLoadedDie1to5 = 0.1, emProbLoadedDie6 = 0.5;
	private static double[][] emissionProb = { {emProbFairDie, emProbFairDie, emProbFairDie, emProbFairDie, emProbFairDie, emProbFairDie},{ emProbLoadedDie1to5, emProbLoadedDie1to5, emProbLoadedDie1to5,emProbLoadedDie1to5,emProbLoadedDie1to5,emProbLoadedDie6} };
	
	private double viterbiIniProbForF = 0.6;
	private double viterbiIniProbForL = 0.4;
	
	private static String actualSequence;
	private static String predictedSequence;
	static int tpCount = 0;
	static int tnCount = 0;
	static int fpCount = 0;
	static int fnCount = 0;
	static double accuracy = 0;

	public static void main(String[] args) throws IOException {
		String op = "E:/SPRING2014/bioinformatics-course/assignHMM/seqFile.txt";
		File seqOutFile = new File(op);
		BufferReaderAndWriter brw = new BufferReaderAndWriter();
		BufferedWriter bw = brw.getWriter(seqOutFile);

		HiddenMarkovModel hmm = new HiddenMarkovModel();
		hmm.setNumState(2);
		hmm.setEventSize(6);
		hmm.setTransProb(transProb);
		hmm.setEmissProb(emissionProb);
		

		Dice d = new Dice();

		for (int i = 0; i < 20; i++) {

			actualSequence = d.generateSequence(hmm.getTransProb()[0][1],
					hmm.getTransProb()[1][0]);

			String observations = d.generateObservation(actualSequence, hmm);

			predictedSequence = d.generateViterbiMatrixAndPointerMatrix(
					observations, hmm, bw);

			bw.write("Roll :    " + observations);
			bw.newLine();

			bw.write("Die :     " + actualSequence);
			bw.newLine();

			bw.write("Viterbi : " + predictedSequence);
			bw.newLine();

			// transition probibility from fare to loaded is being incremented
			// by 0.01 and from loaded to fare is being incremented by 0.05

			hmm.getTransProb()[0][1] = hmm.getTransProb()[0][1] + 0.01;
			hmm.getTransProb()[1][0] = hmm.getTransProb()[1][0] + 0.05;

			for (int j = 0; j < actualSequence.length(); j++) {

				if (actualSequence.charAt(j) == predictedSequence.charAt(j)
						&& actualSequence.charAt(j) == 'F') {

					tpCount = tpCount + 1;

				} else if (actualSequence.charAt(j) == predictedSequence
						.charAt(j) && actualSequence.charAt(j) == 'L') {

					tnCount = tnCount + 1;

				} else if (actualSequence.charAt(j) != predictedSequence
						.charAt(j)
						&& actualSequence.charAt(j) == 'F'
						&& predictedSequence.charAt(j) == 'L') {

					fpCount = fpCount + 1;

				} else if (actualSequence.charAt(j) != predictedSequence
						.charAt(j)
						&& actualSequence.charAt(j) == 'L'
						&& predictedSequence.charAt(j) == 'F') {

					fnCount = fnCount + 1;

				}

			}

			accuracy = (tpCount + tnCount) / (actualSequence.length() + 0.0);
			tpCount = 0;
			tnCount = 0;
			fpCount = 0;
			fnCount = 0;

			bw.write("Accuracy : " + accuracy);
			bw.newLine();
			bw.newLine();

		}

		bw.close();

	}

	/*
	 * generateViterbiMatrixAndPointerMatrix method generates viterbi matrix and
	 * it's corresponding pointer matrix to generate the sequence of states from
	 * the observations
	 * 
	 * here Math.max() will return same number if two arguments to the function
	 * is same.
	 * 
	 * here 1 and -1 in pointer table symbolize Fare and Loaded
	 * 
	 * if both values in fare and loaded are same then most probable path will
	 * be from fare
	 */

	public String generateViterbiMatrixAndPointerMatrix(String obs,
			HiddenMarkovModel hmm, BufferedWriter bw) throws IOException {
		int seqLen = obs.length();
		double viterbi[][] = new double[hmm.getNumState()][seqLen + 1];
		double viterbiPointer[][] = new double[hmm.getNumState()][seqLen + 1];
		double path1;
		double path2;
		double mostProbable;
		double emProb;

		for (int i = 0; i < hmm.getNumState(); i++) {

			viterbi[i][0] = Math.log10(viterbiIniProbForF);
			viterbiPointer[i][0] = Math.log10(viterbiIniProbForL);

		}

		for (int k = 1; k < seqLen + 1; k++) {

			for (int l = 0; l < hmm.getNumState(); l++) {

				int stateCount = 0;
				double pathEndInFEmit = viterbi[stateCount][k - 1];
				double pathEndInLEmit = viterbi[stateCount + 1][k - 1];
				int curObs = Character.getNumericValue(obs.charAt(k - 1));

				if (l == 0) {

					path1 = pathEndInFEmit + Math.log10(hmm.getTransProb()[0][0]);
					path2 = pathEndInLEmit + Math.log10(hmm.getTransProb()[1][0]);

					mostProbable = Math.max(path1, path2);
					emProb = Math.log10(hmm.getEmissProb()[l][curObs - 1]);

					viterbi[l][k] = emProb + mostProbable;

					if (mostProbable == path1) {

						viterbiPointer[l][k] = 1;

					} else if (mostProbable == path2) {

						viterbiPointer[l][k] = -1;

					}

				} else {

					path1 = pathEndInFEmit + Math.log10(hmm.getTransProb()[0][1]);
					path2 = pathEndInLEmit + Math.log10(hmm.getTransProb()[1][1]);

					mostProbable = Math.max(path1, path2);
					emProb = Math.log10(hmm.getEmissProb()[l][curObs - 1]);

					viterbi[l][k] = emProb + mostProbable;

					if (mostProbable == path1) {

						viterbiPointer[l][k] = 1;

					} else if (mostProbable == path2) {

						viterbiPointer[l][k] = -1;

					}

				}

			}

		}

		String traceBackSequence = viterbiTraceBack(viterbi, viterbiPointer,
				hmm.getNumState());

		// these lines just to print them in a file

		// bw.write("Fair: ");
		// for (int m = 0; m < hmm.numState; m++) {
		//
		// for (int n = 0; n < seqLen + 1; n++) {
		//
		// bw.write(Double.toString(viterbi[m][n]));
		// bw.write(" ");
		//
		// }
		// bw.newLine();
		// bw.write("Loaded: ");
		//
		// }
		//
		// bw.newLine();
		// bw.write("FarePtr: ");
		// for (int m = 0; m < hmm.numState; m++) {
		//
		// for (int n = 0; n < seqLen + 1; n++) {
		//
		// bw.write(Double.toString(viterbiPointer[m][n]));
		// bw.write(" ");
		//
		// }
		// bw.newLine();
		// bw.write("LodPtr: ");
		// bw.newLine();
		//
		// }
		// bw.write(traceBackSequence);
		// bw.newLine();
		// bw.newLine();

		return (traceBackSequence);

	}

	/*
	 * 
	 */

	public String viterbiTraceBack(double viterbi[][],
			double viterbiPointer[][], int numState) {

		StringBuilder sb = new StringBuilder();
		StringBuilder sbReverse = new StringBuilder();
		double traceBackStartValue = viterbi[0][viterbi[0].length - 1];
		int stateIndex = 0;

		for (int x = 1; x < numState; x++) {

			if (traceBackStartValue > viterbi[0][viterbi[0].length - 1]) {
				traceBackStartValue = viterbi[x][viterbi[x].length - 1];
				stateIndex = x;
			}

		}

		for (int y = 0; y < numState; y++) {

			if (stateIndex == y) {

				sb.append(stateSymbols[y]);

			}

		}

		for (int i = viterbiPointer[0].length - 2; i >= 0; i--) {

			if (viterbiPointer[stateIndex][i] == 1) {

				sb.append("F");
			} else if (viterbiPointer[stateIndex][i] == -1) {

				sb.append("L");

			}

		}

		// System.out.println(sb.toString());

		for (int j = sb.length() - 1; j >= 0; j--) {

			char st = sb.charAt(j);

			sbReverse.append(st);

		}

		return sbReverse.toString();

	}

	/*
	 * generateObservation method takes two arguments
	 * "seq (sequence of Fare and Loaded of length 1000)" and "hmm (Hidden
	 * Markov Model object to retrive the transition and emission probibilites
	 * depending on whcih sequence of observations are generated)" output of
	 * this method is the sequence of observation of length 1000 (e.g.
	 * 126435453252432523423......)
	 */

	public String generateObservation(String seq, HiddenMarkovModel hmm)
			throws IOException {

		StringBuilder sb = new StringBuilder();

		double epF1 = hmm.getEmissProb()[0][0];
		double epF2 = hmm.getEmissProb()[0][0] + hmm.getEmissProb()[0][1];
		double epF3 = hmm.getEmissProb()[0][0] + hmm.getEmissProb()[0][1]
				+ hmm.getEmissProb()[0][2];
		double epF4 = hmm.getEmissProb()[0][0] + hmm.getEmissProb()[0][1]
				+ hmm.getEmissProb()[0][2] + hmm.getEmissProb()[0][3];
		double epF5 = hmm.getEmissProb()[0][0] + hmm.getEmissProb()[0][1]
				+ hmm.getEmissProb()[0][2] + hmm.getEmissProb()[0][3]
				+ hmm.getEmissProb()[0][4];
		double epF6 = hmm.getEmissProb()[0][0] + hmm.getEmissProb()[0][1]
				+ hmm.getEmissProb()[0][2] + hmm.getEmissProb()[0][3]
				+ hmm.getEmissProb()[0][4] + hmm.getEmissProb()[0][5];

		double tpF1 = hmm.getEmissProb()[1][0];
		double tpF2 = hmm.getEmissProb()[1][0] + hmm.getEmissProb()[1][1];
		double tpF3 = hmm.getEmissProb()[1][0] + hmm.getEmissProb()[1][1]
				+ hmm.getEmissProb()[1][2];
		double tpF4 = hmm.getEmissProb()[1][0] + hmm.getEmissProb()[1][1]
				+ hmm.getEmissProb()[1][2] + hmm.getEmissProb()[1][3];
		double tpF5 = hmm.getEmissProb()[1][0] + hmm.getEmissProb()[1][1]
				+ hmm.getEmissProb()[1][2] + hmm.getEmissProb()[1][3]
				+ hmm.getEmissProb()[1][4];
		double tpF6 = hmm.getEmissProb()[1][0] + hmm.getEmissProb()[1][1]
				+ hmm.getEmissProb()[1][2] + hmm.getEmissProb()[1][3]
				+ hmm.getEmissProb()[1][4] + hmm.getEmissProb()[1][5];

		for (int i = 0; i < 1000; i++) {

			char currState = seq.charAt(i);

			double randNum = Math.random();

			if (currState == 'F') {

				if (randNum <= epF1) {

					sb.append("1");

				} else if (randNum > epF1 && randNum <= epF2) {

					sb.append("2");

				} else if (randNum > epF2 && randNum <= epF3) {
					sb.append("3");

				} else if (randNum > epF3 && randNum <= epF4) {

					sb.append("4");
				} else if (randNum > epF4 && randNum <= epF5) {

					sb.append("5");

				} else if (randNum > epF5 && randNum <= epF6) {

					sb.append("6");
				}

			} else if (currState == 'L') {

				if (randNum <= tpF1) {

					sb.append("1");

				} else if (randNum > tpF1 && randNum <= tpF2) {

					sb.append("2");

				} else if (randNum > tpF2 && randNum <= tpF3) {
					sb.append("3");

				} else if (randNum > tpF3 && randNum <= tpF4) {

					sb.append("4");
				} else if (randNum > tpF4 && randNum <= tpF5) {

					sb.append("5");

				} else if (randNum > tpF5 && randNum <= tpF6) {

					sb.append("6");
				}

			}

		}

		return sb.toString();

	}

	/*
	 * generateSequence is the method which takes two arguments
	 * "transFL (transition probability from fare to loaded)" and
	 * "transLF (transition probability from loaded to fare)" and depending on
	 * these probibilities generate the sequence of states "F (Fare)" and
	 * "L (Loaded)" of lenght 1000
	 */

	public String generateSequence(double transFL, double transLF)
			throws IOException {

		StringBuilder sbStates = new StringBuilder();
		String currentState = "";
		if (viterbiIniProbForF > viterbiIniProbForL) {

			currentState = "F";
			sbStates.append("F");

		} else {

			currentState = "L";
			sbStates.append("L");

		}

		for (int i = 1; i < 1000; i++) {

			double random = Math.random();

			if (currentState == "F" && random > transFL) {

				sbStates.append("F");
				currentState = "F";

			} else if (currentState == "F" && random <= transFL) {

				sbStates.append("L");
				currentState = "L";

			} else if (currentState == "L" && random > transLF) {

				sbStates.append("L");
				currentState = "L";

			} else if (currentState == "L" && random <= transLF) {

				sbStates.append("F");
				currentState = "F";

			}

		}

		return sbStates.toString();

	}

}
