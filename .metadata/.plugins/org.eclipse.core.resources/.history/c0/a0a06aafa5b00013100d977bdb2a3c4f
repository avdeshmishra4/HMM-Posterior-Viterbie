package dishonestcasino;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;

public class Dice {

	private static int numState = 2, eventSize = 6;
	private static double transFL = 0.01, transLF = 0.1, transFF = 1 - transFL,
			transLL = 1 - transLF;
	private static double[][] transProb = { {transFF, transFL}, {transLF, transLL} };
	
	private static String  stateSymbols[] = { "F", "L" };
	private static String  emmisionSymbols[] = {"1","2","3","4","5","6"};
	
	private static double emProbFairDie = 0.16666666666666666;
	private static double emProbLoadedDie1to5 = 0.1, emProbLoadedDie6 = 0.5;
	private static double[][] emissionProb = { {emProbFairDie, emProbFairDie, emProbFairDie, emProbFairDie, emProbFairDie, emProbFairDie},{ emProbLoadedDie1to5, emProbLoadedDie1to5, emProbLoadedDie1to5,emProbLoadedDie1to5,emProbLoadedDie1to5,emProbLoadedDie6} };
	private static double[] startProbability = {0.8,0.2};
	
	
	public static void main(String[] args) throws IOException {
		String op = "E:/SPRING2014/bioinformatics-course/assignHMM/seqFile.txt";
		File seqOutFile = new File(op);
		BufferReaderAndWriter brw = new BufferReaderAndWriter();
		BufferedWriter bw = brw.getWriter(seqOutFile);
		String actualSequence;
		
		
		HiddenMarkovModel hmm = new HiddenMarkovModel();
		hmm.setNumState(numState);
		hmm.setEventSize(eventSize);
		hmm.setTransProb(transProb);
		hmm.setEmissProb(emissionProb);
		hmm.setiProb(startProbability);
		

		Dice d = new Dice();

		for (int i = 0; i < 20; i++) {

			actualSequence = d.generateSequence(hmm,hmm.getTransProb(0,1),
					hmm.getTransProb(1,0));

			String observations = d.generateObservation(actualSequence, hmm);

			ViterbiPredictor vp = new ViterbiPredictor();
			
			vp.test(actualSequence,
					observations, hmm, bw, stateSymbols);
			
			PosteriorPredictor pp = new PosteriorPredictor();
			double forwardMatrix[][] = pp.forwardAlgorithm(actualSequence, observations, hmm, bw, stateSymbols);
			pp.backwardAlgorithm(actualSequence, observations, hmm, bw, stateSymbols, forwardMatrix);

			
			// transition probibility from fare to loaded is being incremented
			// by 0.01 and from loaded to fare is being incremented by 0.05

			hmm.setTransProb(0, 1, hmm.getTransProb(0, 1)+0.01);
			hmm.setTransProb(1, 0, hmm.getTransProb(1, 0)+0.05);

			

		}

		bw.close();

	}

	

	/*
	 * generateObservation method takes two arguments
	 * "seq (sequence of Fare and Loaded of length 1000)" and "hmm (Hidden
	 * Markov Model object to retrive the transition and emission probibilites
	 * depending on whcih sequence of observations are generated)" output of
	 * this method is the sequence of observation of length 1000 (e.g.
	 * 126435453252432523423......)
	 */

	public String bservationTest(String seq, HiddenMarkovModel hmm)
			throws IOException {

		double range[][] = new double[hmm.getNumState()][hmm.getEventSize()];
		
		
		for(int i = 0; i < hmm.getNumState(); i++){
			double sum = 0;
			for(int j = 0; j < hmm.getEventSize(); j++){
				
				
				
				
			}
			
			
			
		}
			
		
		
		return sb.toString();

	}
	
	
	public String generateObservation(String seq, HiddenMarkovModel hmm)
			throws IOException {

		StringBuilder sb = new StringBuilder();

		double epF1 = hmm.getEmissProb(0,0);
		double epF2 = hmm.getEmissProb(0,0) + hmm.getEmissProb(0,1);
		double epF3 = hmm.getEmissProb(0,0) + hmm.getEmissProb(0,1)+ hmm.getEmissProb(0,2);
		double epF4 = hmm.getEmissProb(0,0) + hmm.getEmissProb(0,1)+ hmm.getEmissProb(0,2) + hmm.getEmissProb(0,3);
		double epF5 = hmm.getEmissProb(0,0) + hmm.getEmissProb(0,1)+ hmm.getEmissProb(0,2) + hmm.getEmissProb(0,3)+ hmm.getEmissProb(0,4);
		double epF6 = hmm.getEmissProb(0,0) + hmm.getEmissProb(0,1)+ hmm.getEmissProb(0,2) + hmm.getEmissProb(0,3)+ hmm.getEmissProb(0,4)+ hmm.getEmissProb(0,5);

		double tpF1 = hmm.getEmissProb(1,0);
		double tpF2 = hmm.getEmissProb(1,0) + hmm.getEmissProb(1,1);
		double tpF3 = hmm.getEmissProb(1,0) + hmm.getEmissProb(1,1)+ hmm.getEmissProb(1,2);
		double tpF4 = hmm.getEmissProb(1,0) + hmm.getEmissProb(1,1)+ hmm.getEmissProb(1,2)+ hmm.getEmissProb(1,3);
		double tpF5 = hmm.getEmissProb(1,0) + hmm.getEmissProb(1,1)+ hmm.getEmissProb(1,2)+ hmm.getEmissProb(1,3)+ hmm.getEmissProb(1,4);
		double tpF6 = hmm.getEmissProb(1,0) + hmm.getEmissProb(1,1)+ hmm.getEmissProb(1,2)+ hmm.getEmissProb(1,3)+ hmm.getEmissProb(1,4)+ hmm.getEmissProb(1,5);

		for (int i = 0; i < 1000; i++) {

			char currState = seq.charAt(i);

			double randNum = Math.random();

			if (currState == 'F') {

				if (randNum <= epF1) {

					sb.append("1");

				} else if (randNum > epF1 && randNum <= epF2) {

					sb.append("2");

				} else if (randNum > epF2 && randNum <= epF3) {
					sb.append("3");

				} else if (randNum > epF3 && randNum <= epF4) {

					sb.append("4");
				} else if (randNum > epF4 && randNum <= epF5) {

					sb.append("5");

				} else if (randNum > epF5 && randNum <= epF6) {

					sb.append("6");
				}

			} else if (currState == 'L') {

				if (randNum <= tpF1) {

					sb.append("1");

				} else if (randNum > tpF1 && randNum <= tpF2) {

					sb.append("2");

				} else if (randNum > tpF2 && randNum <= tpF3) {
					sb.append("3");

				} else if (randNum > tpF3 && randNum <= tpF4) {

					sb.append("4");
				} else if (randNum > tpF4 && randNum <= tpF5) {

					sb.append("5");

				} else if (randNum > tpF5 && randNum <= tpF6) {

					sb.append("6");
				}

			}

		}

		return sb.toString();

	}

	/*
	 * generateSequence is the method which takes two arguments
	 * "transFL (transition probability from fare to loaded)" and
	 * "transLF (transition probability from loaded to fare)" and depending on
	 * these probibilities generate the sequence of states "F (Fare)" and
	 * "L (Loaded)" of lenght 1000
	 */

	public String generateSequence(HiddenMarkovModel hmm, double transFL, double transLF)
			throws IOException {

		StringBuilder sbStates = new StringBuilder();
		String currentState = "";
		if ( hmm.getiProb()[0]> hmm.getiProb()[1]) {

			currentState = "F";
			sbStates.append("F");

		} else {

			currentState = "L";
			sbStates.append("L");

		}

		for (int i = 1; i < 1000; i++) {

			double random = Math.random();

			if (currentState == "F" && random > transFL) {

				sbStates.append("F");
				currentState = "F";

			} else if (currentState == "F" && random <= transFL) {

				sbStates.append("L");
				currentState = "L";

			} else if (currentState == "L" && random > transLF) {

				sbStates.append("L");
				currentState = "L";

			} else if (currentState == "L" && random <= transLF) {

				sbStates.append("F");
				currentState = "F";

			}

		}

		return sbStates.toString();

	}

}
