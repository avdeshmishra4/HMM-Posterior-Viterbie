package dishonestcasino;

import java.io.BufferedWriter;
import java.io.IOException;

public class PosteriorPredictor {

	public double[][] forwardAlgorithm(String actualSequence, String obs,
			HiddenMarkovModel hmm, BufferedWriter bw, String stateSymbols[])
			throws IOException {

		int seqLen = actualSequence.length();
		double forwardMatrix[][] = new double[hmm.getNumState()][seqLen + 1];

		for (int i = 0; i < hmm.getNumState(); i++) {

			forwardMatrix[i][0] = Math.log(hmm.getiProb()[i])/5;

		}

		for (int i = 1; i < seqLen + 1; i++) {

			for (int j = 0; j < hmm.getNumState(); j++) {

				int numState = 0;
				double sum = 0;
				while (numState < hmm.getNumState()) {

					sum = sum + forwardMatrix[numState][i - 1]
							+ Math.log(hmm.getTransProb()[numState][j]);
					numState++;

				}

				forwardMatrix[j][i] = (Math.log(hmm.getEmissProb()[j][Character
						.getNumericValue(obs.charAt(i - 1)) - 1]) + sum) / 5;

			}

		}

		return forwardMatrix;

	}

	public void backwardAlgorithm(String actualSequence, String obs, HiddenMarkovModel hmm,
			BufferedWriter bw, String stateSymbols[], double[][] forwardMatrix)
			throws IOException {

		int seqLen = obs.length();
		double backwardMatrix[][] = new double[hmm.getNumState()][seqLen + 1];
		double stateAssignmentF = 0;
		double stateAssignmentL = 0;
		int tpCount = 0;
		int tnCount = 0;
		int fpCount = 0;
		int fnCount = 0;
		double accuracy = 0;

		// here the end of the matrix has one extra column to store the probability of end state with 1
		
		for (int x = 0; x < hmm.getNumState(); x++) {

			backwardMatrix[x][backwardMatrix[x].length - 1] = 1;

		}

		for (int y = hmm.getNumState() - 1; y >= 0; y--) {

			double sum = 0;
			int numState = hmm.getNumState() - 1;
			while (numState > -1) {

				sum = sum
						+ Math.log(Math.exp(Math.log(hmm.getTransProb()[y][numState])
								+ 1
								+ backwardMatrix[numState][backwardMatrix[y].length - 1]));
				numState--;

			}
	//		System.out.println(backwardMatrix[y][backwardMatrix[y].length - 2] = sum / 5);

		}

		for (int i = backwardMatrix[0].length - 3; i >= 0; i--) {

			for (int j = hmm.getNumState() - 1; j >= 0; j--) {

				double sum = 0;
				int numState = hmm.getNumState() - 1;
				while (numState > -1) {

					sum = sum
							+ Math.log(Math.exp(Math.log(hmm.getTransProb()[j][numState])
									+ Math.log(hmm.getEmissProb()[numState][Character
											.getNumericValue(obs.charAt(i + 1)) - 1])
									+ backwardMatrix[numState][i + 1]));

					numState--;

				}

				backwardMatrix[j][i] = sum / 5;

			}

		}

		// below is the code which identifies the predicted symbol generated by
		// posterior decoding

		int matrixLen = forwardMatrix[0].length - 1;
		StringBuilder sb = new StringBuilder();
		double maxValue;
		for (int k = 1; k <= matrixLen; k++) {

			for (int l = 0; l < hmm.getNumState(); l++) {

				stateAssignmentF = forwardMatrix[l][k]
						* backwardMatrix[l][k - 1]
						/ forwardMatrix[l][matrixLen];
				stateAssignmentL = forwardMatrix[l + 1][k]
						* backwardMatrix[l + 1][k - 1]
						/ forwardMatrix[l][matrixLen];
				l++;

			}

			maxValue = Math.max(stateAssignmentF, stateAssignmentL);

			if (maxValue == stateAssignmentF) {

				sb.append("F");

			} else if (maxValue == stateAssignmentL) {

				sb.append("L");

			}

		}

		bw.write("Bkwd Algo :       " + sb.toString());
		String predictedSequence = sb.toString();
		bw.newLine();

		for (int j = 0; j < actualSequence.length(); j++) {

			if (actualSequence.charAt(j) == predictedSequence.charAt(j)
					&& actualSequence.charAt(j) == 'F') {

				tpCount = tpCount + 1;

			} else if (actualSequence.charAt(j) == predictedSequence.charAt(j)
					&& actualSequence.charAt(j) == 'L') {

				tnCount = tnCount + 1;

			} else if (actualSequence.charAt(j) != predictedSequence.charAt(j)
					&& actualSequence.charAt(j) == 'F'
					&& predictedSequence.charAt(j) == 'L') {

				fpCount = fpCount + 1;

			} else if (actualSequence.charAt(j) != predictedSequence.charAt(j)
					&& actualSequence.charAt(j) == 'L'
					&& predictedSequence.charAt(j) == 'F') {

				fnCount = fnCount + 1;

			}

		}

		accuracy = (tpCount + tnCount) / (actualSequence.length() + 0.0);

		bw.write("Bkwd Accuracy :   " + accuracy);
		bw.newLine();
		bw.newLine();

	}
	
	
	public void printAccuracy(String actualSequence, String predictedSequence, HiddenMarkovModel hmm){
		
		
		for (int j = 0; j < actualSequence.length(); j++) {

			if (actualSequence.charAt(j) == predictedSequence.charAt(j)
					&& actualSequence.charAt(j) == 'F') {

				tpCount = tpCount + 1;

			} else if (actualSequence.charAt(j) == predictedSequence.charAt(j)
					&& actualSequence.charAt(j) == 'L') {

				tnCount = tnCount + 1;

			} else if (actualSequence.charAt(j) != predictedSequence.charAt(j)
					&& actualSequence.charAt(j) == 'F'
					&& predictedSequence.charAt(j) == 'L') {

				fpCount = fpCount + 1;

			} else if (actualSequence.charAt(j) != predictedSequence.charAt(j)
					&& actualSequence.charAt(j) == 'L'
					&& predictedSequence.charAt(j) == 'F') {

				fnCount = fnCount + 1;

			}

		}

		accuracy = (tpCount + tnCount) / (actualSequence.length() + 0.0);

		bw.write("Bkwd Accuracy :   " + accuracy);
		bw.newLine();
		bw.newLine();
		
		
		
	}

	
}
