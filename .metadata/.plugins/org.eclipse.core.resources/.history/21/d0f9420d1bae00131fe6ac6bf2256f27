package dishonestcasino;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;

public class Dice {

	public static double transFL = 0.01, transLF = 0.1, transFF = 1 - transFL,
			transLL = 1 - transLF;
	public static int numState = 2, eventSize = 6;
	public static double emProbFairD = 0.16666666666666666;
	public static double emProbLoadedD1to5 = 0.1, emProbLoadedD6 = 0.5;

	public static void main(String[] args) throws IOException {
		String op = "E:/SPRING2014/bioinformatics-course/assignHMM/seqFile.txt";
		File seqOutFile = new File(op);
		BufferReaderAndWriter brw = new BufferReaderAndWriter();
		BufferedWriter bw = brw.getWriter(seqOutFile);
		HiddenMarkovModel hmm = new HiddenMarkovModel(numState, eventSize);

		/*
		 * insert transition probability to the HiddenMarkovModel
		 */
		hmm.transProb[0][0] = transFF;
		hmm.transProb[0][1] = transFL;
		hmm.transProb[1][0] = transLF;
		hmm.transProb[1][1] = transLL;

		/*
		 * insert emission probability to the HiddenMarkovModel
		 */

		for (int i = 0; i < 2; i++) {

			for (int j = 0; j < 6; j++) {

				if (i == 0) {

					hmm.emissProb[i][j] = emProbFairD;

				} else if (i == 1) {

					if (j < 5) {

						hmm.emissProb[i][j] = emProbLoadedD1to5;
					} else {

						hmm.emissProb[i][j] = emProbLoadedD6;
					}

				}

			}

		}

		Dice d = new Dice();

		for (int i = 0; i < 20; i++) {

			String sequence = d.generateSequence(hmm.transProb[0][1],
					hmm.transProb[1][0]);
			bw.write(sequence);
			bw.newLine();
			
			String observations = d.generateObservation(sequence, hmm);
			bw.write(observations);
			bw.newLine();
			bw.newLine();
			d.generateViterbiMatrixAndPointerMatrix(observations, hmm);
			hmm.transProb[0][1] = hmm.transProb[0][1] + 0.01;
			hmm.transProb[1][0] = hmm.transProb[1][0] + 0.05;
			
			
		}

		bw.close();

	}
	
	
	/*
	 * generateViterbiMatrixAndPointerMatrix method generates viterbi matrix and it's corresponding pointer matrix
	 * to generate the sequence of states from the observations
	 * 
	 * here Math.max() will return same number if two arguments to the function is same.
	 */
	
	public void generateViterbiMatrixAndPointerMatrix(String obs , HiddenMarkovModel hmm){
		int seqLen = obs.length();
		double viterbi[][] = new double[hmm.numState][seqLen+1];
		double viterbiPointer[][] = new double[hmm.numState][seqLen+1];
		
		for(int i = 0; i < hmm.numState; i++){
			
			viterbi[i][0] = 0;
			viterbiPointer[i][0] = 0;
			
			
		}
		
		for(int k = 1; k < seqLen+1; k++){
			
			for(int l = 0; l < hmm.numState; l++){
				
				int stateCount = 0;
				double pathEndInFEmit = viterbi[stateCount][k-1];
				double pathEndInLEmit = viterbi[stateCount+1][k-1];
				int curObs = obs.charAt(k-1);
				double path1 = pathEndInFEmit*hmm.transProb[0][1];
				double path2 = pathEndInLEmit*hmm.transProb[1][0];
				double mostProbable = Math.max(path1, path2);
				double emProb = hmm.emissProb[l][curObs];
				
				viterbi[l][k] = mostProbable * emProb;
				
				if(mostProbable == path1){
					
					viterbiPointer[][] = 1;
										
				}else if(mostProbable == path2){
					
					viterbiPointer[][] = -1;
					
					
				}
				
				
				
			}
			
			
		}
		
		
		
		
	}
	
	
	/*
	 * generateObservation method takes two arguments "seq (sequence of Fare and Loaded of length 1000)" and "hmm (Hidden Markov Model object 
	 * to retrive the transition and emission probibilites depending on whcih sequence of observations are generated)"
	 * output of this method is the sequence of observation of length 1000 (e.g. 126435453252432523423......)
	 */

	public String generateObservation(String seq, HiddenMarkovModel hmm)
			throws IOException {

		StringBuilder sb = new StringBuilder();

		double epF1 = hmm.emissProb[0][0];
		double epF2 = hmm.emissProb[0][0] + hmm.emissProb[0][1];
		double epF3 = hmm.emissProb[0][0] + hmm.emissProb[0][1]
				+ hmm.emissProb[0][2];
		double epF4 = hmm.emissProb[0][0] + hmm.emissProb[0][1]
				+ hmm.emissProb[0][2] + hmm.emissProb[0][3];
		double epF5 = hmm.emissProb[0][0] + hmm.emissProb[0][1]
				+ hmm.emissProb[0][2] + hmm.emissProb[0][3]
				+ hmm.emissProb[0][4];
		double epF6 = hmm.emissProb[0][0] + hmm.emissProb[0][1]
				+ hmm.emissProb[0][2] + hmm.emissProb[0][3]
				+ hmm.emissProb[0][4] + hmm.emissProb[0][5];

		double tpF1 = hmm.emissProb[1][0];
		double tpF2 = hmm.emissProb[1][0] + hmm.emissProb[1][1];
		double tpF3 = hmm.emissProb[1][0] + hmm.emissProb[1][1]
				+ hmm.emissProb[1][2];
		double tpF4 = hmm.emissProb[1][0] + hmm.emissProb[1][1]
				+ hmm.emissProb[1][2] + hmm.emissProb[1][3];
		double tpF5 = hmm.emissProb[1][0] + hmm.emissProb[1][1]
				+ hmm.emissProb[1][2] + hmm.emissProb[1][3]
				+ hmm.emissProb[1][4];
		double tpF6 = hmm.emissProb[1][0] + hmm.emissProb[1][1]
				+ hmm.emissProb[1][2] + hmm.emissProb[1][3]
				+ hmm.emissProb[1][4] + hmm.emissProb[1][5];

		for (int i = 0; i < 1000; i++) {

			char currState = seq.charAt(i);

			double randNum = Math.random();

			if (currState == 'F') {

				if (randNum <= epF1) {

					sb.append("1");

				} else if (randNum > epF1 && randNum <= epF2) {

					sb.append("2");

				} else if (randNum > epF2 && randNum <= epF3) {
					sb.append("3");

				} else if (randNum > epF3 && randNum <= epF4) {

					sb.append("4");
				} else if (randNum > epF4 && randNum <= epF5) {

					sb.append("5");

				} else if (randNum > epF5 && randNum <= epF6) {

					sb.append("6");
				}

			} else if (currState == 'L') {
				
				
				if (randNum <= tpF1) {

					sb.append("1");

				} else if (randNum > tpF1 && randNum <= tpF2) {

					sb.append("2");

				} else if (randNum > tpF2 && randNum <= tpF3) {
					sb.append("3");

				} else if (randNum > tpF3 && randNum <= tpF4) {

					sb.append("4");
				} else if (randNum > tpF4 && randNum <= tpF5) {

					sb.append("5");

				} else if (randNum > tpF5 && randNum <= tpF6) {

					sb.append("6");
				}

			}

		}

		return sb.toString();

	}
	
	/*
	 * generateSequence is the method which takes two arguments "transFL (transition probability from fare to loaded)"
	 * and "transLF (transition probability from loaded to fare)" and depending on these probibilities generate the sequence of states "F (Fare)"
	 * and "L (Loaded)" of lenght 1000
	 */

	public String generateSequence(double transFL, double transLF)
			throws IOException {

		StringBuilder sbStates = new StringBuilder();
		String currentState = "F";
		sbStates.append("F");

		for (int i = 1; i < 1000; i++) {

			double random = Math.random();

			if (currentState == "F" && random > transFL) {

				sbStates.append("F");

			} else if (currentState == "F" && random <= transFL) {

				sbStates.append("L");

			} else if (currentState == "L" && random > transLF) {

				sbStates.append("L");

			} else if (currentState == "L" && random <= transFL) {

				sbStates.append("F");

			}

		}

		return sbStates.toString();

	}

}
