package dishonestcasino;

import java.io.BufferedWriter;
import java.io.IOException;

public class ViterbiPredictor {

	/*
	 * generateViterbiMatrixAndPointerMatrix method generates viterbi matrix and
	 * it's corresponding pointer matrix to generate the sequence of states from
	 * the observations
	 * 
	 * here Math.max() will return first arguments if two arguments to the function
	 * is same.
	 * 
	 * Math.log10() is used to combat against the underflow problem 
	 */

	public void generateViterbiMatrixAndPointerMatrix(String actualSequence, String obs, HiddenMarkovModel hmm,
			BufferedWriter bw, String stateSymbols[], BufferedWriter writeAccuracy) throws IOException {
		int seqLen = obs.length();
		double viterbi[][] = new double[hmm.getNumState()][seqLen + 1];
		int viterbiPointer[][] = new int[hmm.getNumState()][seqLen + 1];

		for (int i = 0; i < hmm.getNumState(); i++) {									// initialize viterbi matrix with initial probabilities having one extra column at the begining
																						// of matrix				
			viterbi[i][0] = Math.log10(hmm.getiProb(i));
			viterbiPointer[i][0] = 0;													// also store zeros at the beginning of the pointer matrix (this actually doesn't have any use by default the values are zero)

		}

		for (int k = 1; k < seqLen + 1; k++) {											// iterate through each index of sequence and compute the value for each element using viterbi forward recursion formula

			for (int l = 0; l < hmm.getNumState(); l++) {								// here the values are being calculated in log10 scale to solve the underflow during calculation

				int numState = 0;
				double max = 0;
				int maxStateRepresentative = 0;

				while (numState < hmm.getNumState()) {									// calculation for the maxarg part of the viterbi forward algorithm ( Vj(i)= ej(xi) * maxk akj Vk(i â€“ 1) )

					if (numState == 0) {

						max = viterbi[numState][k - 1]
								* Math.log10(hmm.getTransProb(numState, l));
						maxStateRepresentative = numState;
						numState++;

					} else {

						if (max < viterbi[numState][k - 1]
								* Math.log10(hmm.getTransProb(numState, l))) {

							max = viterbi[numState][k - 1]
									* Math.log10(hmm.getTransProb(numState, l));

							maxStateRepresentative = numState;
							numState++;
						}

						numState++;
					}

				}
				

				viterbi[l][k] = Math.log10(hmm.getEmissProb(l, Character.getNumericValue(obs.charAt(k - 1)) - 1)) + max;		// addition of maxarg part with the emission probability and saving the value into teh viterbi matrix
				viterbiPointer[l][k] = maxStateRepresentative;																	// save the index of maxargs in the viterbi pointer matrix

			}

		}

		String traceBackSequence = viterbiTraceBack(viterbi, viterbiPointer,													// once the viterbi forward matrixa and the viterbi pointer matrix are ready call viterbiTraceBack method 
				hmm.getNumState(), stateSymbols);																				// to generate the predicted sequence of states

		bw.write("Roll :            " + obs);																					// write the observation sequence. actual state sequence, traceback sequence (predicted sequence)
		bw.newLine();																											// into the output file			

		bw.write("Die :             " + actualSequence);
		bw.newLine();

		bw.write("Viterbi :         " + traceBackSequence);
		bw.newLine();

		printAccuracy(actualSequence, traceBackSequence, bw, writeAccuracy, hmm);																	// call printAccuracy method to print the accuracy of predicte sequence

	}

	/*
	 * This method takes viterbi matrix, viterbipointer matrix, number of states and state symbols as its argument
	 * 
	 *  Here trace back is performed by taking the max value from the last column from the viterbi matrix.
	 *  Symbol is emitted based on the which state has max value.
	 *  this current stat index provides the information which state and column to look in while working out for backtrace
	 */

	public String viterbiTraceBack(double viterbi[][], int viterbiPointer[][],
			int numState, String stateSymbols[]) {

		StringBuilder sb = new StringBuilder();																		// sb object stores the symbols in reverse order as we trace back from last index 
		StringBuilder sbReverse = new StringBuilder();																// sbReverse object is used here to store the reverse of the symbols generated from trace back 
		double traceBackStartValue = viterbi[0][viterbi[0].length - 1];												// traceBackStartValue variable store the value of last column of viterbi matrix
		int stateIndex = 0;
		
		for (int x = 1; x < numState; x++) {																		// identify the max value of last column of viterbi matrix
			
			if (traceBackStartValue < viterbi[x][viterbi[x].length - 1]) {
				traceBackStartValue = viterbi[x][viterbi[x].length - 1];
				stateIndex = x;
			}

		}

		for (int y = 0; y < numState; y++) {																		// append state symbol to string buffer on the basis of state index of max value found on previous loop

			if (stateIndex == y) {

				// predictedSeq[predictedSeq.length-1] = stateSymbols[y];

				sb.append(stateSymbols[y]);

			}

		}

		for (int i = viterbiPointer[0].length - 2; i > 0; i--) {													// store the index of last state symbol emitted and accordingly generate the state symbols

			int stateCount = viterbiPointer[stateIndex][i];

			// predictedSeq[i] = stateSymbols[stateCount];

			sb.append(stateSymbols[stateCount]);

			stateIndex = stateCount;

		}

		// System.out.println(sb.toString());

		for (int j = sb.length() - 1; j >= 0; j--) {																// reverse the stringbuffer and store reversed symbols in sbReverse stringbuffer

			char st = sb.charAt(j);

			sbReverse.append(st);

		}

		return sbReverse.toString();																				// return the reverse string buffer

	}
	
	
	
	/*
	 * printAccuracy is the method which takes generated state sequence (actualSequence)  and viterbi predicted sequence and buffered writer
	 * 
	 * this method writes the accuracy of viterbi decoding in an output file
	 */
	
	
	public void printAccuracy(String actualSequence, String predictedSequence,									
			BufferedWriter bw, BufferedWriter writeAccuracy, HiddenMarkovModel hmm) throws IOException {

		int tpCount = 0;
		int tnCount = 0;
		int fpCount = 0;
		int fnCount = 0;
		double accuracy = 0;
		
		

		for (int j = 0; j < actualSequence.length(); j++) {

			if (actualSequence.charAt(j) == predictedSequence.charAt(j)
					&& actualSequence.charAt(j) == 'F') {

				tpCount = tpCount + 1;

			} else if (actualSequence.charAt(j) == predictedSequence.charAt(j)
					&& actualSequence.charAt(j) == 'L') {

				tnCount = tnCount + 1;

			} else if (actualSequence.charAt(j) != predictedSequence.charAt(j)
					&& actualSequence.charAt(j) == 'F'
					&& predictedSequence.charAt(j) == 'L') {

				fpCount = fpCount + 1;

			} else if (actualSequence.charAt(j) != predictedSequence.charAt(j)
					&& actualSequence.charAt(j) == 'L'
					&& predictedSequence.charAt(j) == 'F') {

				fnCount = fnCount + 1;

			}

		}

		accuracy = (tpCount + tnCount) / (actualSequence.length() + 0.0);

		bw.write("Viterbi Accuracy  : " + accuracy);

		bw.newLine();
		
		
		writeAccuracy.write(arg0);
		
		

	}

}
