package dishonestcasino;

import java.io.BufferedWriter;
import java.io.IOException;

public class ViterbiPredictor {
	
	/*
	 * veriables to calculate accuracy
	 */
	static int tpCount = 0;
	static int tnCount = 0;
	static int fpCount = 0;
	static int fnCount = 0;
	static double accuracy = 0;
	
	/*
	 * generateViterbiMatrixAndPointerMatrix method generates viterbi matrix and
	 * it's corresponding pointer matrix to generate the sequence of states from
	 * the observations
	 * 
	 * here Math.max() will return same number if two arguments to the function
	 * is same.
	 * 
	 * here 1 and -1 in pointer table symbolize Fare and Loaded
	 * 
	 * if both values in fare and loaded are same then most probable path will
	 * be from fare
	 */

	public String generateViterbiMatrixAndPointerMatrix(String obs,
			HiddenMarkovModel hmm, BufferedWriter bw, String stateSymbols[]) throws IOException {
		int seqLen = obs.length();
		double viterbi[][] = new double[hmm.getNumState()][seqLen + 1];
		double viterbiPointer[][] = new double[hmm.getNumState()][seqLen + 1];
		double path1;
		double path2;
		double mostProbable;
		double emProb;

		for (int i = 0; i < hmm.getNumState(); i++) {

			viterbi[i][0] = Math.log10(hmm.getiProb()[0]);
			viterbiPointer[i][0] = Math.log10(hmm.getiProb()[1]);

		}

		for (int k = 1; k < seqLen + 1; k++) {

			for (int l = 0; l < hmm.getNumState(); l++) {

				int stateCount = 0;
				double pathEndInFEmit = viterbi[stateCount][k - 1];
				double pathEndInLEmit = viterbi[stateCount + 1][k - 1];
				int curObs = Character.getNumericValue(obs.charAt(k - 1));

				if (l == 0) {

					path1 = pathEndInFEmit + Math.log10(hmm.getTransProb()[0][0]);
					path2 = pathEndInLEmit + Math.log10(hmm.getTransProb()[1][0]);

					mostProbable = Math.max(path1, path2);
					emProb = Math.log10(hmm.getEmissProb()[l][curObs - 1]);

					viterbi[l][k] = emProb + mostProbable;

					if (mostProbable == path1) {

						viterbiPointer[l][k] = 1;

					} else if (mostProbable == path2) {

						viterbiPointer[l][k] = -1;

					}

				} else {

					path1 = pathEndInFEmit + Math.log10(hmm.getTransProb()[0][1]);
					path2 = pathEndInLEmit + Math.log10(hmm.getTransProb()[1][1]);

					mostProbable = Math.max(path1, path2);
					emProb = Math.log10(hmm.getEmissProb()[l][curObs - 1]);

					viterbi[l][k] = emProb + mostProbable;

					if (mostProbable == path1) {

						viterbiPointer[l][k] = 1;

					} else if (mostProbable == path2) {

						viterbiPointer[l][k] = -1;

					}

				}

			}

		}

		String traceBackSequence = viterbiTraceBack(viterbi, viterbiPointer,
				hmm.getNumState(), stateSymbols);

		// these lines just to print them in a file

		// bw.write("Fair: ");
		// for (int m = 0; m < hmm.numState; m++) {
		//
		// for (int n = 0; n < seqLen + 1; n++) {
		//
		// bw.write(Double.toString(viterbi[m][n]));
		// bw.write(" ");
		//
		// }
		// bw.newLine();
		// bw.write("Loaded: ");
		//
		// }
		//
		// bw.newLine();
		// bw.write("FarePtr: ");
		// for (int m = 0; m < hmm.numState; m++) {
		//
		// for (int n = 0; n < seqLen + 1; n++) {
		//
		// bw.write(Double.toString(viterbiPointer[m][n]));
		// bw.write(" ");
		//
		// }
		// bw.newLine();
		// bw.write("LodPtr: ");
		// bw.newLine();
		//
		// }
		// bw.write(traceBackSequence);
		// bw.newLine();
		// bw.newLine();

		return (traceBackSequence);

	}

	/*
	 * 
	 */

	public String viterbiTraceBack(double viterbi[][],
			double viterbiPointer[][], int numState, String stateSymbols[]) {

		StringBuilder sb = new StringBuilder();
		StringBuilder sbReverse = new StringBuilder();
		double traceBackStartValue = viterbi[0][viterbi[0].length - 1];
		int stateIndex = 0;

		for (int x = 1; x < numState; x++) {

			if (traceBackStartValue > viterbi[0][viterbi[0].length - 1]) {
				traceBackStartValue = viterbi[x][viterbi[x].length - 1];
				stateIndex = x;
			}

		}

		for (int y = 0; y < numState; y++) {

			if (stateIndex == y) {

				sb.append(stateSymbols[y]);

			}

		}

		for (int i = viterbiPointer[0].length - 2; i >= 0; i--) {

			if (viterbiPointer[stateIndex][i] == 1) {

				sb.append("F");
			} else if (viterbiPointer[stateIndex][i] == -1) {

				sb.append("L");

			}

		}

		// System.out.println(sb.toString());

		for (int j = sb.length() - 1; j >= 0; j--) {

			char st = sb.charAt(j);

			sbReverse.append(st);

		}

		return sbReverse.toString();

	}
	
	
	
	

}
